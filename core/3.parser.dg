import '/re'
import '/collections'
import '/ast/literal_eval'


#: Parse an input string.
#:
#: parse :: str (Optional str) -> Node
#:
parse = data filename: '<string>' -> (Parser data filename).file


#: Parse the contents of a file-like object opened in text mode.
#:
#: parsefd :: TextIOBase (Optional str) -> Node
#:
parsefd = data filename: '<stream>' -> parse (data.read -1) filename


Parser = subclass collections.deque where
  #: A precompiled regular expression that should match a single lexeme.
  #: Every top-level group must be named; its name is passed to `token`
  #: in order to determine which token is being processed.
  #:
  #: regex :: _SRE
  #:
  regex = re.compile r'''(?isx)
    (?P<skip>   [^\S\n]+|\s*\#[^\n]*)
   |(?P<number> (?P<realnum>
      [+-]?(?:
        (?P<isbin>0b[0-1]   +)
       |(?P<isoct>0o[0-7]   +)
       |(?P<ishex>0x[0-9a-f]+)
       |(?:[0-9]+ (?P<isfloat> (?:\.[0-9]+)? (?:e[+-]?[0-9]+)?))
      )
    )(?P<isimag>j)?)
   |(?P<string>
      (?P<flags>br|r?b?)
      (?P<quote>'{3}|"{3}|'|")
      (?P<content>(?:[^\\]|\\.)*?)
      \11)  # should point to <quote>. XXX does this make the regex NP-complete?
   |(?P<strerr> (?:br|r?b?)['"])  # i.e. a string that has a beginning but no end
   |(?P<name>   \w+'*|\*+(?=:))
   |(?P<infix>  [!$%&*+\--/:<-@\\^|~;]+|,)
   |(?P<eol>    \s*\n(?P<indent>\ *))
   |(?P<block>  [\(\{\[])
   |(?P<end>    [\)\}\]])
   |(?P<iname>  `(?P<iname_>\w+'*)`)
   |(?P<error>  .)
  '''

  #: A recursive descent parser with a built-in regex-based tokenizer.
  #:
  #:   tokens :: iter MatchObject -- see `regex`.
  #:   indent :: deque int -- a stack of indentation levels, starting with 0.
  #:   lineno :: int -- 1-based line number.
  #:   charno :: int -- 1-based character number.
  #:   lines  :: list str -- the input, split at line breaks.
  #:
  __init__ = @data @filename ~>
    @tokens = @regex.finditer @data
    @indent = collections.deque $ list' 0
    @lineno = 1
    @charno = 1
    @lines  = @data.split '\n'
    None

  __iter__ = self -> self
  __next__ = self -> if
    self      => @pop!
    otherwise => except
      err =>
        match = next @tokens
        text  = match.group 0
        pos   = @location

        '\n' in text => @charno = -text.rfind '\n'
        @charno += len text
        @lineno += text.count '\n'
        @token pos match.lastgroup match
      err :: StopIteration => Ending @location '\0'

  #: The offset of the next token in the source code as a `SyntaxError`-compatible tuple.
  #:
  #: location :: (str, int, int, str)
  #:
  location = ~> (@filename, @lineno, @charno, @lines !! (@lineno - 1))

  #: A mapping of open parens to close parens.
  #:
  #: endof :: dict str str
  #:
  endof = dict' ('(', ')') ('{', '}') ('[', ']')

  #: Handle a single regex match. (The second argument is the name of its top-level group.)
  #:
  #: token :: (str, int, int, str) str MatchObject -> Node
  #:
  token = pos f m ~> if
    f == 'skip'   => next self
    f == 'block'  => @block pos m.group! $ x -> x :: Ending and x.value == @endof !! m.group!
    f == 'end'    => Ending   pos m.group!
    f == 'name'   => Name     pos False $ m.group 'name'
    f == 'infix'  => Name     pos True  $ m.group 'infix'
    f == 'iname'  => Name     pos True  $ m.group 'iname_'
    f == 'string' => Constant pos $ literal_eval $
      q = 3 * m.group 'quote' !! 0
      m.group 'flags' + q + m.group 'content' + q

    f == 'number' => Constant pos $ (*)
      if m.group 'isimag' => 1j
         otherwise        => 1
      if m.group 'isfloat' => float (m.group 'realnum')
         m.group 'isbin'   => int   (m.group 'realnum') 2
         m.group 'isoct'   => int   (m.group 'realnum') 8
         m.group 'ishex'   => int   (m.group 'realnum') 16
         otherwise         => int   (m.group 'realnum') 10

    f == 'eol' =>
      level = len $ m.group 'indent'

      if level == last @indent => Name pos True '\n'
         level >  last @indent =>
           @indent.append level
           @block pos None $ x ->
             x :: Ending => x.value == '\n' or
               # Indented blocks can be ended with close-parens.
               # We have to account for a decrease in indentation, though.
               @indent.pop!
               # A parenthesized block will take `x` (a close-paren) off the stack.
               @append x
             x :: Ending
         otherwise =>
           @append $ Name pos True '\n'
           while level != @indent.pop! =>
             @indent or raise (SyntaxError 'no matching indentation level' @location)
             @append $ Ending @location '\n'
           @indent.append level
           @pop!

    f == 'strerr' => raise $ SyntaxError 'unexpected EOF in a string literal' pos
    f == 'error'  => raise $ SyntaxError 'invalid character'                  pos
    otherwise     => raise $ KeyError $ 'unhandled group {!r}'.format f

  #: Parse the whole input, yielding a complete AST.
  #:
  #: file :: Node
  #:
  file = ~> @block @location None $ x ->
    x :: Ending => if
      x.value == '\0' => True
      x.value == '\n' => raise $ SyntaxError 'indentation < 0?'       x.loc
      otherwise       => raise $ SyntaxError 'unexpected close-paren' x.loc

  #: A block kind is defined by a function that creates an empty block
  #: and a function that takes the contents of a block and preprocesses them.
  #:
  #: blkinds :: dict (Maybe str) ((Location -> Node), (Location Node -> Node))
  #:
  blkinds = dict'
    '{',  ((pos -> Constant pos None), tuple_into "dict'")
    '[',  ((pos -> Constant pos None), tuple_into "list'")
    '(',  ((pos -> Constant pos tuple!), (_ ast -> ast))
    None, ((pos -> Constant pos None),   (_ ast -> ast))

  #: Read tokens until `end` returns True.
  #:
  #: block :: (str, int, int, str) (Maybe str) (Node -> bool) -> Node
  #:
  block = pos kind end ~>
    null, one = @blkinds !! kind
    isexpr = False
    result = null pos

    while not $ end (x = next self) => if
      x :: Ending => if
        x.value == '\n' => raise $ SyntaxError 'indentation less than minimum for this block' x.loc
        x.value == '\0' => raise $ SyntaxError 'unexpected EOF (a block was not closed)'      pos
        otherwise       => raise $ SyntaxError 'invalid close-paren'                          x.loc
      # BTW, a "null denotation" is when a node is at the start of a token group,
      # like in the last branch. A "left denotation" is when a node is to the right
      # of some other node, i.e. `isexpr` is `True`. That's Pratt parser teminology.
      isexpr    => result = @infix (Name x.loc True '') result x
      x != '\n' => result, isexpr = @special x, True

    result = one pos result
    result.closed |= not $ kind is None
    result.indent  =       kind is None
    result

  #: Combine two parts of a tree with an infix `Name`.
  #:
  #: infix :: Name Node Node -> Node
  #:
  infix = op lhs rhs ~> if
    # FIXME `special` below uses different end conditions.
    #
    #     [source]    [expected]    [what actually happens]
    #     if x =>     if (x =>)     if (x => # no Ending here, we consume the next token!
    #        y => z      (y => z)      (y => z))  # (which is the indented block)
    #
    rhs :: Ending or op.norhs =>
      @append rhs
      if op in ('', '\n') => lhs  # these are no-op on one argument. Optimization!
         otherwise        => @infixin op lhs None
    rhs.infix and not rhs.closed => if
      rhs.nolhs or (op != '' and op < rhs) =>
        # `a op (b rhs c)`
        @infixin op lhs $ @infix (Name rhs.loc True '') rhs $ next self
      # `(a op b) rhs c`
      op in ('', '\n') => @infix rhs lhs $ next self  # still no-op.
      otherwise        => @infix rhs (@infixin op lhs None) $ next self
    otherwise => @infixin op lhs rhs

  #: Recursively descend into `lhs` to apply infix precedence rules.
  #:
  #: infixin :: Name Node (Maybe Node) -> Expression
  #:
  infixin = op lhs rhs ~> if
    # Right binding strength is lower => descend.
    lhs :: Expression and not lhs.closed and lhs.op < op =>
      lhs.args !! -1 = @infixin op (lhs.args !! -1) rhs
      lhs
    # Variadic operator joined with itself => combine argument lists
    # to create a single expression instead of a double-nesting.
    lhs :: Expression and not lhs.closed and op.varary and op == lhs.op =>
      rhs is None or
        lhs.args += (@make_call op lhs rhs).args !! slice 1 None
      lhs
    # No right-hand side => create a left infix bind. `x R` <=> `y -> x R y`,
    # only `x` is evaluated eagerly. Normally. The compiler can override that.
    rhs is None =>
      bind = LeftBind lhs.loc op lhs
      bind.closed = True
      bind
    # Trying to call an infix operator with an argument => that's
    # actually a right bind, not a function call. `R x` <=> `y -> y R x`. (Normally.)
    op == '' and lhs.infix and not lhs.closed =>
      RightBind lhs.loc lhs $ if
        lhs < ''  => @special rhs
        otherwise => rhs
    # So that's a normal infix expression.
    otherwise => @make_call op lhs rhs

  #: Create a simple function call. (Almost) no fancy rules.
  #:
  #: make_call :: Name Node Node -> Expression
  #:
  make_call = op lhs rhs ~> if
    # If a function call is followed by an indented block,
    # each statement in that block is a separate argument to that call.
    op == '' and not rhs.closed and rhs :: Expression and rhs.op == '\n' =>
      Expression lhs.loc op lhs *: rhs.args
    op < '' =>  # That means `rhs` is a null denotation.
      Expression lhs.loc op lhs $ @special rhs
    otherwise =>
      Expression lhs.loc op lhs rhs

  #: Handle a couple of fancy syntactic constructs.
  #:
  #: special :: Node -> Node
  #:
  special = x ~> if
    # These nodes consume everything until the next fat arrow.
    # "f X => Y" becomes equivalent to "(X) `f` Y".
    x.flags & 1 => @infix x (@block x.loc '(' ('=>' ==)) (next self)
    # These nodes consume everything until the EOL.
    # "f ...\n" => "f (...)\n".
    x.flags & 2 =>
      arg = @block x.loc None $ y ->
        y :: Ending or y == '\n' or y.indent =>
          @append y
          True

      if arg :: Constant and arg.value is None => x
         otherwise => @infixin (Name arg.loc True '') x arg
    otherwise => x
