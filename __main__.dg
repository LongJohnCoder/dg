import '/os'
import '/sys'
import '/runpy'
import '/importlib'

import '/dg'
import '/dg/core'
import '/dg/repl'


USAGE = '''
python3 [options] -m dg -h
python3 [options] -m dg -b [tag [hexversion]]
python3 [options] -m dg [-c <command> | -m <module> | <file>] ...

VM options that make sense when used with dg:

  -B           don't save bytecode cache (i.e. `.pyc` and `.pyo` files);
  -E           ignore environment variables
  -s           don't add user site directory to sys.path
  -S           don't `import site` on startup
  -u           don't buffer standard output
  -v           trace import statements
  -X           implementation-specific options

Arguments:

  -h           show this message and exit
  -b           rebootstrap the compiler
    tag        cache tag of the target interpreter (e.g. `cpython-35`)
    hexversion version of the target interpreter as 8 hex digits (e.g. `030500A0`)
  -c command   run a single command, then exit
  -m module    run a module (or a package's `__main__`) as a script
  file         run a script
  ...          additional arguments accessible through `sys.argv`

Environment variables:

  PYTHONSTARTUP     a Python file executed on interactive startup
  PYTHONSTARTUPMOD  a name of the module to use instead of PYTHONSTARTUP
  PYTHONPATH        a `:`-separated list of directories to search for modules in
  PYTHONPREFIX      override the `--prefix` option of `configure`

...that have the same effect as options:

  PYTHONDONTWRITEBYTECODE    -B
  PYTHONNOUSERSITE           -s
  PYTHONUNBUFFERED           -u
  PYTHONVERBOSE              -v
'''


_arg = -> if
  len sys.argv > 1 => sys.argv.pop 1
  otherwise        => exit $ 'error: {[0]} requires an argument'.format sys.argv


sys.argv.pop 0
sys.argv = sys.argv or list' '-'

if head sys.argv == '-h' => print USAGE
   head sys.argv == '-b' =>
     tag, version = if
       len sys.argv > 2 => sys.argv !! 1, int (sys.argv !! 2) 16
       len sys.argv > 1 => sys.argv !! 1, dg.PY_VERSION
       otherwise        => dg.PY_TAG,     dg.PY_VERSION
     print '[0] loading the current version'
     this = core.load dg.PY_TAG dg.BUNDLE_DIR
     print '[1] building a new version...'
     this = list $ core.build this tag version
     if tag != dg.PY_TAG => print '[WARN] building for a different VM; self-testing impossible.'
        otherwise =>
          print '[2] self-testing the new version and applying its optimizations to itself...'
          this = list $ core.build this tag version
          print '[3] self-testing the optimized version...'
          this = list $ core.build this tag version
     print '[4] saving the new version'
     core.save this tag dg.BUNDLE_DIR

   head sys.argv == '-m' => runpy.run_module _arg! dg.BUILTINS '__main__' True
   head sys.argv == '-c' => repl.runcode $ dg.compile _arg! '<string>'
   head sys.argv != '-'  => repl.runfile $ open encoding: 'utf-8' $ head sys.argv
   otherwise             => repl.runfile sys.stdin where if
     sys.flags.ignore_environment =>  # `python -E`
     (fn = os.environ.get 'PYTHONSTARTUPMOD') => importlib.import_module fn
     (fn = os.environ.get 'PYTHONSTARTUP')    => runpy.run_path fn dg.BUILTINS '__main__'
