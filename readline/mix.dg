import '/re'
import '/math'
import 'ansi/Key'


History = subclass object where
  #: A mix-in that enables history navigation with up and down arrows.
  #:
  #: history :: [str] -- a list of previously entered lines
  #:
  __init__ = *: args **: kwargs ~>
    (super History self).__init__ *: args **: kwargs
    @history  = list!
    @bindings = dict @bindings
    @bindings !! Key.UP   = @history_prev
    @bindings !! Key.DOWN = @history_next
    None

  #: Switch to the previous history entry, if any. The contents of the buffer are lost.
  #:
  #: history_prev :: ReadlineState -> ReadlineState
  #:
  history_prev = state ~>
    i = state.cache.get 'history' -1
    i > -len @history =>
      state = state.erase  0 $ len state.buffer
      state = state.insert 0 $ @history !! (i - 1)
      state.cache !! 'history' = i - 1
    state

  #: Switch to the next history entry, if any. The contents of the buffer are lost.
  #:
  #: history_next :: ReadlineState -> ReadlineState
  #:
  history_next = state ~>
    i = state.cache.get 'history' -1
    i = state.cache.get 'history' -1
    i < -1 =>
      state = state.erase  0 $ len state.buffer
      state = state.insert 0 $ @history !! (i + 1)
      state.cache !! 'history' = i + 1
    state

  input = *: args **: kwargs ~> result where
    @history.append ''
    @history !! -1 = result = yield from $ (super History self).input *: args **: kwargs
    @history !! -1 or @history !!~ -1


Completer = subclass object where
  completion_keys  = set' Key.TAB
  completion_regex = re.compile r'\w+'

  #: A mix-in that enables basic completion.
  #:
  #: completion_key :: str -- the key on which to trigger completion.
  #: completion_sep :: Re  -- a regex that matches all word separators.
  #:
  __init__ = *: args **: kwargs ~>
    (super Completer self).__init__ *: args **: kwargs
    @bindings = dict @bindings
    for k in @completion_keys => @bindings !! k = @complete_event
    None

  #: Handle a completion event. Default implementation calls `complete_buffer`
  #: and either substitutes the incomplete word for a result or outputs the list
  #: with `display_completions`.
  #:
  #: complete_event :: ReadlineState -> ReadlineState
  #:
  complete_event = state ~>
    start, length, cmps = @complete_buffer state.buffer state.position
    cmps => if
      len cmps == 1 =>
        state = state.erase  start length
        state = state.insert start $ head cmps
      otherwise =>
        state = @finalize state
        @display_completions cmps
    state

  #: Find the word to complete and get the list of possible completions.
  #: Returns a (start index, length, completions) tuple.
  #:
  #: complete_buffer :: str int -> (int, int, [str])
  #:
  complete_buffer = buf at ~> except
    err => m = next $ filter (m -> m.start! <= at <= m.end!) $ @completion_regex.finditer buf
    err is None => m.start!, m.end! - m.start!, @complete_word m.group!
    err :: StopIteration => 0, 0, list!

  #: Fetch the list of possible completions for a word.
  #:
  #: complete_word :: str -> [str]
  #:
  complete_word = word ~> list' "complete_word" "not" "implemented"

  #: Format and display a list of multiple possible completions.
  #:
  #: display_completions :: [str] -> a
  #:
  display_completions = cmps ~>
    maxlen = max $ map len cmps
    width  = @tty.size !! 1 // (maxlen + 1)
    height = math.ceil $ len cmps / width
    for y in range height =>
      for x in range y (len cmps `min` y + width * height) height =>
        @tty.write ' '
        @tty.write $ (cmps !! x).ljust maxlen
      @tty.write '\n'


Pygments = subclass object where
  pygments_lexer     = 'text'
  pygments_formatter = 'terminal'

  preprocess = where except
    err =>
      import '/pygments/highlight'
      import '/pygments/lexers/get_lexer_by_name'
      import '/pygments/formatters/get_formatter_by_name'
      x ~>
        x = highlight x
          get_lexer_by_name     @pygments_lexer
          get_formatter_by_name @pygments_formatter
        x.rstrip '\n'
    err :: ImportError => x ~> x
