import '/re'
import '/asyncio'
import '/collections'

import 'ansi'
import 'mix'
import 'tty/Teletype'


ReadlineState = subclass object where
  #: A readline input state.
  #:
  #: Defines stuff such as the current buffer contents, caret position, etc.
  #:
  __init__ = @prompt @buffer: '' @position: 0 @cache: dict! ~> None

  #: Move the caret to the right.
  #:
  #: right :: int -> ReadlineState
  #:
  right = i ~> ReadlineState @prompt @buffer (@position + i `min` len @buffer) @cache.copy!

  #: Move the caret to the left.
  #:
  #: left :: int -> ReadlineState
  #:
  left = i ~> ReadlineState @prompt @buffer (@position - i `max` 0) @cache.copy!

  #: Insert a string into the buffer, move the caret if necessary.
  #:
  #: insert :: int str -> ReadlineState
  #:
  insert = i d ~> if
    i < 0     => @insert 0 $ d !! slice (-i) None
    otherwise => ReadlineState @prompt
      (+)
        @buffer !! slice None i + d
        @buffer !! slice i None
      @position + len d * (i <= @position)
      @cache.copy!

  #: Erase the characters at position `i`, move the caret accordingly.
  #:
  #: erase :: int (Optional int) -> ReadlineState
  #:
  erase = i length: 1 ~> if
    i < 0     => @erase 0 $ length + i
    otherwise => ReadlineState @prompt
      (+)
        @buffer !! slice None i
        @buffer !! slice (i + length) None
      @position - (length `min` @position - i `max` 0)
      @cache.copy!


Readline = subclass object where
  __init__ = @tty ~>
    @_suspend = None
    @_restore = None

  #: Temporarily pause `input`, allowing other tasks to print stuff to the teletype
  #: without it getting mixed with user input. Note that this will halt until
  #: `input` is suspended; if it's not even running, this will block. No-op if already
  #: suspended.
  #:
  #: suspend :: coroutine None
  #:
  suspend = ~>
    @_suspend is None =>
      @_suspend = asyncio.Future loop: @tty._loop
      @tty.data_received b'\r'
    except err => yield from @_suspend
           finally => err => @_suspend = None

  #: Unpause a suspended `input` and redraw the prompt. No-op if not suspended.
  #:
  #: restore :: coroutine None
  #:
  restore = ~>
    @_suspend =>
      @_suspend = None
      @_restore and not @_restore.done! => @_restore.set_result None
      @tty.data_received b'\r'
    ()

  #: A mapping of keys to state modificators. Note that a key may be
  #: either a character or an ANSI sequence.
  #:
  #: bindings :: dict str (ReadlineState -> ReadlineState)
  #:
  bindings = dict'
    ansi.Key.ENTER,     state -> raise $ StopIteration state.buffer
    ansi.Key.RIGHT,     state -> state.right 1
    ansi.Key.LEFT,      state -> state.left  1
    ansi.Key.END,       state -> state.right $ len state.buffer
    ansi.Key.END_ALT,   state -> state.right $ len state.buffer
    ansi.Key.HOME,      state -> state.left    state.position
    ansi.Key.HOME_ALT,  state -> state.left    state.position
    ansi.Key.DEL_ANSI,  state -> state.erase   state.position
    ansi.Key.DEL_ASCII, state -> state.erase $ state.position - 1
    ansi.Key.DEL_CTRL,  state -> state.erase $ state.position - 1
    ansi.Key.EOF,       state -> if
      state.buffer => state  # Only works at the beginning of a line.
      otherwise    => raise $ EOFError state.buffer

  #: Whether to enable ^C and ^Z. Disallows the use of `Key.SIGINT` and `Key.SUSPEND`.
  #:
  #: enable_jobs :: bool
  #:
  enable_jobs = True

  #: Whether to enable XON/XOFF, whatever that means. Disables `Key.XON` and `Key.XOFF`.
  #:
  #: enable_flowctl :: bool
  #:
  enable_flowctl = False

  #: Default line preprocessor. Does nothing.
  #:
  #: This method is called whenever an updated display is required.
  #: Its only argument is the buffer, and the return value should
  #: be an ANSI-escaped string to display. This could be used,
  #: for example, to implement syntax highlighting.
  #:
  #: NOTE: this method must NOT change the apparent length of a string.
  #:   Otherwise, the caret will appear in the wrong position.
  #:
  #: preprocess :: str -> str
  #:
  preprocess = ln ~> ln

  #: Read a line from a TTY while displaying a preview on another TTY.
  #:
  #: If the prompt is a function, it will be called with the current
  #: `ReadlineState` whenever the display is updated.
  #:
  #: input :: (Either str (ReadlineState -> str)) -> str
  #:
  input = prompt ~>
    with @tty.raw @enable_jobs @enable_flowctl => except
      error =>
        state = ReadlineState prompt
        @update state
        while True => if
          @_suspend =>
            @_suspend.done! or @_suspend.set_result None
            @_restore is None => @_restore = asyncio.Future loop: @tty._loop
            state = @finalize state
            except _ => yield from @_restore
                   finally => @_restore = None

          otherwise =>
            for c in yield from @tty.buffer => state = if
              @bindings.get  c => (@bindings !! c) state
              @tty.printable c => state.insert state.position c
              otherwise        => state  # ignore unrecognized special commands
            @update state
      finally => @finalize state

  #: Write a preview of a line buffer onto a TTY.
  #:
  #: update :: ReadlineState -> ReadlineState
  #:
  update = state ~>
    prefix = if
      state.prompt :: collections.Callable => state.prompt state
      otherwise => state.prompt
    prelen = @tty.ansi_len prefix

    # We're going to assume the VT handles windows resizing correctly
    # (i.e. rewraps long lines.)
    wh, ww = @tty.size
    h, w = prelen + len state.buffer `divmod` ww
    y, x = prelen + state.position   `divmod` ww
    # 1. Go to where the last prompt started.
    #    If its start is already off the screen, we'll just go where we can.
    _h, _w = state.cache.get 'termsize' (0, 1)
    _y, _x = state.cache.get 'lastpos' 0 `divmod` _w
    @tty.relmove (-_y) (-_x)
    # 2. Overwrite it with the new data, erase what can't be overwritten.
    @tty.write $ prefix + @preprocess state.buffer
    @tty.erase
    # 3. Go back to the beginning. Note: if the string fits
    #    exactly on one line and the cursor is still there,
    #    VTs won't create an empty line.
    if w == 0 and (y, x) != (h, w) => @tty.relmove (1 - h) (-ww)
       otherwise => @tty.relmove (-h) (-w)
    # 4. Move to where the caret should be. Note that (0, 0) may be off-screen,
    #    and terminals will truncate offsets.
    @tty.relmove (y - (h - wh `max` 0)) x
    @tty.flush!
    # The next `update` will use that info.
    state.cache !! 'lastlen'  = prelen + len state.buffer
    state.cache !! 'lastpos'  = prelen + state.position
    state.cache !! 'termsize' = wh, ww
    state

  #: Move the cursor to the end of the text.
  #: This allows key handlers to print other stuff between prompts.
  #: Don't forget to call `update` later.
  #:
  #: finalize :: ReadlineState -> ReadlineState
  #:
  finalize = state ~> if state.cache.get 'lastlen' 0 =>
    @update $ state.right $ len state.buffer - state.position
    @tty.write '\n\r'
    state.cache.pop 'lastlen' 0
    state.cache.pop 'lastpos' 0
    state
